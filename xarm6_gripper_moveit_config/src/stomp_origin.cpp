#include <ros/ros.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <trajectory_msgs/JointTrajectory.h>

int main(int argc, char **argv)
{
    ros::init(argc, argv, "xArm6");
    ros::NodeHandle node_handle;
    ros::AsyncSpinner spinner(1);
    spinner.start();
    moveit::planning_interface::MoveGroupInterface group("xarm6");
    // trajectoryの指定
    moveit_msgs::RobotTrajectory trajectory;
    trajectory_msgs::JointTrajectory joint_trajectory;
    joint_trajectory.joint_names = {"joint1", "joint2", "joint3", "joint4", "joint5", "joint6"};

    std::vector<std::vector<double>> waypoints = {
        {-4.883031569136165e-05, -1.795537086390908e-05, -8.574273420691725e-05, -2.9929239535597674e-05, 7.380936662482185e-05, -7.279262466131087e-05},
	{-0.007710144489219128, 0.02859878372612557, -0.0995553932943987, 0.055775814866477445, 0.03690259954851356, 0.07384806844498788},
	{-0.015371458662746895, 0.057215522823115046, -0.1990250438545905, 0.11158155897249049, 0.0737313897304023, 0.14776892951463708},
	{-0.02303277283627466, 0.08583226192010453, -0.2984946944147823, 0.16738730307850355, 0.11056017991229106, 0.22168979058428628},
	{-0.030694087009802428, 0.114449001017094, -0.39796434497497407, 0.22319304718451657, 0.14738897009417978, 0.29561065165393546},
	{-0.038355401183330196, 0.1430657401140835, -0.4974339955351659, 0.2789987912905296, 0.18421776027606854, 0.36953151272358464},
	{-0.04601671535685796, 0.17168247921107296, -0.5969036460953577, 0.3348045353965427, 0.2210465504579573, 0.4434523737932339},
	{-0.05367802953038573, 0.20029921830806244, -0.6963732966555495, 0.3906102795025557, 0.257875340639846, 0.517373234862883},
	{-0.061339343703913494, 0.2289159574050519, -0.7958429472157412, 0.44641602360856875, 0.29470413082173474, 0.5912940959325322},
	{-0.06900065787744127, 0.2575326965020414, -0.8953125977759331, 0.5022217677145818, 0.3315329210036235, 0.6652149570021815},
	{-0.07666197205096903, 0.2861494355990309, -0.9947822483361248, 0.5580275118205948, 0.36836171118551225, 0.7391358180718306},
	{-0.08432328622449681, 0.31476617469602036, -1.0942518988963168, 0.613833255926608, 0.40519050136740103, 0.8130566791414799},
	{-0.09198460039802456, 0.34338291379300984, -1.1937215494565085, 0.669639000032621, 0.44201929154928976, 0.8869775402111291},
	{-0.09964591457155234, 0.3719996528899993, -1.2931912000167003, 0.725444744138634, 0.47884808173117854, 0.9608984012807783},
	{-0.1073072287450801, 0.4006163919869888, -1.392660850576892, 0.781250488244647, 0.5156768719130672, 1.0348192623504273},
	{-0.11496854291860788, 0.4292331310839783, -1.492130501137084, 0.8370562323506602, 0.552505662094956, 1.1087401234200767},
	{-0.12262985709213563, 0.45784987018096773, -1.5916001516972755, 0.8928619764566731, 0.5893344522768447, 1.1826609844897258},
	{-0.13029117126566342, 0.48646660927795726, -1.6910698022574675, 0.9486677205626862, 0.6261632424587334, 1.2565818455593751},
	{-0.13795248543919117, 0.5150833483749467, -1.7905394528176592, 1.0044734646686992, 0.6629920326406222, 1.3305027066290243},
	{-0.14561379961271895, 0.5437000874719362, -1.8900091033778512, 1.0602792087747124, 0.699820822822511, 1.4044235676986734},
	{-0.1532751137862467, 0.5723168265689257, -1.9894787539380427, 1.1160849528807253, 0.7366496130043997, 1.4783444287683225},
	{-0.16093642795977448, 0.6009335656659152, -2.0889484044982347, 1.1718906969867384, 0.7734784031862885, 1.5522652898379719},
	{-0.01504732934995981, 0.6419776591405176, -2.1374844842330143, 1.1667136385436527, 0.7761995315718716, 1.6176724143717751},
	{0.13084176925985486, 0.68302175261512, -2.1860205639677943, 1.1615365801005673, 0.7789206599574546, 1.6830795389055786},
	{0.27673086786966944, 0.7240658460897225, -2.234556643702574, 1.1563595216574816, 0.7816417883430378, 1.7484866634393819},
	{0.4226199664794842, 0.7651099395643248, -2.283092723437354, 1.151182463214396, 0.7843629167286208, 1.8138937879731853},
	{0.5685090650892988, 0.8061540330389273, -2.3316288031721335, 1.1460054047713104, 0.7870840451142039, 1.8793009125069886},
	{0.6515484447530729, 0.7986041880593473, -2.3122542716882934, 1.067585511295646, 0.7938771359028971, 1.8595019071264485},
	{0.7345878244168471, 0.7910543430797674, -2.292879740204453, 0.9891656178199815, 0.8006702266915902, 1.8397029017459083},
	{0.8063185658622447, 0.778678739796824, -2.2180657371335344, 0.8902637899980113, 0.8083651135462341, 1.8009371945025803},
	{0.8780493073076422, 0.7663031365138805, -2.143251734062616, 0.791361962176041, 0.816060000400878, 1.7621714872592522},
	{0.9497800487530398, 0.7539275332309371, -2.0684377309916973, 0.6924601343540708, 0.823754887255522, 1.7234057800159241},
	{1.0215107901984373, 0.7415519299479936, -1.9936237279207785, 0.5935583065321006, 0.831449774110166, 1.684640072772596},
	{1.0932415316438349, 0.7291763266650502, -1.9188097248498597, 0.49465647871013046, 0.8391446609648099, 1.645874365529268},
	{1.1649722730892325, 0.7168007233821068, -1.843995721778941, 0.3957546508881603, 0.8468395478194538, 1.60710865828594},
	{1.2367030145346298, 0.7044251200991632, -1.7691817187080225, 0.2968528230661901, 0.8545344346740977, 1.568342951042612},
	{1.3084337559800274, 0.6920495168162198, -1.694367715637104, 0.19795099524421977, 0.8622293215287418, 1.5295772437992838},
	{1.380164497425425, 0.6796739135332763, -1.6195537125661852, 0.09904916742224967, 0.8699242083833857, 1.4908115365559558},
	{1.4518952388708226, 0.6672983102503329, -1.5447397094952666, 0.00014733960027940753, 0.8776190952380296, 1.4520458293126277}
    };

    for (const auto& waypoint : waypoints) {
        trajectory_msgs::JointTrajectoryPoint point;
        point.positions = waypoint;
        joint_trajectory.points.push_back(point);
    }
    trajectory.joint_trajectory = joint_trajectory;
    
    // 目標関節角度の指定
    std::map<std::string, double> joint_values;
    joint_values["joint1"] = 1.4518952388708226;
    joint_values["joint2"] = 0.6672983102503329;
    joint_values["joint3"] = -1.5447397094952666;
    joint_values["joint4"] = 0.00014733960027940753;
    joint_values["joint5"] = 0.8776190952380296;
    joint_values["joint6"] = 1.4520458293126277;

    moveit:: planning_interface::MoveGroupInterface::Plan new_plan;
    new_plan.trajectory_ = trajectory;
    std::size_t num_of_points = trajectory.joint_trajectory.points.size();
    std::vector<moveit_msgs::Constraints> all_joint_constrains;
    moveit_msgs::TrajectoryConstraints initial_traj;
    
    for (int j = 0; j<num_of_points; j++)
    {
        std::vector<moveit_msgs::JointConstraint> joint_constraints_at_t;
        for (const auto& kv : joint_values) {
        moveit_msgs::JointConstraint joint_con;
        joint_con.joint_name = kv.first;
        joint_con.position = kv.second;
        joint_con.weight = 1;
        joint_constraints_at_t.push_back(joint_con);
        }

    moveit_msgs::Constraints con;
    con.joint_constraints = joint_constraints_at_t;
    all_joint_constrains.push_back(con);
    }

    initial_traj.constraints = all_joint_constrains;
    robot_state::RobotState robot_state_start(*group.getCurrentState());
    group.setStartState(robot_state_start);
    group.setTrajectoryConstraints (initial_traj);
    group.setJointValueTarget (joint_values);
    bool success2 = (group.plan(new_plan) == moveit:: planning_interface::MoveItErrorCode::SUCCESS);
    if (success2)
    {
        ROS_WARN("Successs to make optimized path!");
        group.execute(new_plan);
    }
    return 0;
}
