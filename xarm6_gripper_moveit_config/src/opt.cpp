#include <ros/ros.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <trajectory_msgs/JointTrajectory.h>

int main(int argc, char **argv)
{
    ros::init(argc, argv, "xArm6");
    ros::NodeHandle node_handle;
    ros::AsyncSpinner spinner(1);
    spinner.start();
    moveit::planning_interface::MoveGroupInterface group("xarm6");

    // trajectoryの指定
    moveit_msgs::RobotTrajectory trajectory;
    trajectory.joint_trajectory.joint_names = {"joint1", "joint2", "joint3", "joint4", "joint5", "joint6"};

    std::vector<std::vector<double>> waypoints = {
        {4.361691394816347e-05, -4.549517718466234e-05, -7.679402761073817e-05, 9.749420298188483e-05, -9.865705155043258e-06, -7.692414441429207e-06},
	{0.027371501845528834, 0.022613741838399603, -0.09573733451761833, -0.04120260599950464, 0.08482237291496367, -0.035482117029908986},
	{0.054699386777109504, 0.04527297885398387, -0.19139787500762592, -0.08250270620199117, 0.16965461153508238, -0.07095654164537654},
	{0.08202727170869017, 0.06793221586956813, -0.2870584154976335, -0.1238028064044777, 0.25448685015520106, -0.1064309662608441},
	{0.10935515664027085, 0.0905914528851524, -0.3827189559876411, -0.16510290660696422, 0.3393190887753198, -0.14190539087631165},
	{0.13668304157185152, 0.11325068990073665, -0.47837949647764866, -0.20640300680945076, 0.4241513273954385, -0.1773798154917792},
	{0.1640109265034322, 0.13590992691632092, -0.5740400369676563, -0.2477031070119373, 0.5089835660155572, -0.21285424010724677},
	{0.19133881143501286, 0.1585691639319052, -0.6697005774576639, -0.28900320721442385, 0.593815804635676, -0.24832866472271434},
	{0.21866669636659353, 0.18122840094748946, -0.7653611179476715, -0.33030330741691033, 0.6786480432557946, -0.2838030893381819},
	{0.2459945812981742, 0.20388763796307371, -0.8610216584376791, -0.3716034076193969, 0.7634802818759133, -0.31927751395364945},
	{0.27332246622975487, 0.22654687497865797, -0.9566821989276866, -0.4129035078218834, 0.848312520496032, -0.35475193856911696},
	{0.30065035116133554, 0.24920611199424225, -1.0523427394176943, -0.45420360802436993, 0.9331447591161508, -0.39022636318458453},
	{0.3279782360929162, 0.2718653490098265, -1.1480032799077018, -0.49550370822685647, 1.0179769977362694, -0.4257007878000521},
	{0.3553061210244969, 0.29452458602541076, -1.2436638203977093, -0.5368038084293429, 1.1028092363563882, -0.4611752124155196},
	{0.38263400595607755, 0.31718382304099507, -1.339324360887717, -0.5781039086318296, 1.187641474976507, -0.49664963703098725},
	{0.4099618908876582, 0.3398430600565793, -1.4349849013777247, -0.619404008834316, 1.2724737135966255, -0.5321240616464548},
	{0.4372897758192389, 0.3625022970721636, -1.5306454418677322, -0.6607041090368025, 1.3573059522167443, -0.5675984862619223},
	{0.4646176607508195, 0.38516153408774784, -1.6263059823577397, -0.7020042092392891, 1.442138190836863, -0.6030729108773898},
	{0.49194554568240023, 0.4078207711033321, -1.7219665228477474, -0.7433043094417757, 1.5269704294569817, -0.6385473354928575},
	{0.5192734306139809, 0.43048000811891635, -1.817627063337755, -0.7846044096442621, 1.6118026680771005, -0.674021760108325},
	{0.5466013155455616, 0.4531392451345006, -1.9132876038277624, -0.8259045098467487, 1.696634906697219, -0.7094961847237925},
	{0.5739292004771422, 0.47579848215008486, -2.00894814431777, -0.8672046100492352, 1.7814671453173376, -0.7449706093392601},
	{0.6012570854087229, 0.49845771916566917, -2.104608684807778, -0.9085047102517217, 1.8662993839374566, -0.7804450339547276},
	{0.6285849703403036, 0.5211169561812534, -2.2002692252977853, -0.9498048104542083, 1.9511316225575752, -0.8159194585701952},
	{0.6739249770125703, 0.5006707600373888, -2.195374729197157, -0.9119258435422998, 1.9196760191375657, -0.7036739257857246},
	{0.719264983684837, 0.4802245638935241, -2.1904802330965283, -0.8740468766303914, 1.8882204157175564, -0.591428393001254},
	{0.7646049903571037, 0.4597783677496594, -2.1855857369959, -0.8361679097184829, 1.8567648122975469, -0.47918286021678347},
	{0.8099449970293704, 0.43933217160579474, -2.180691240895271, -0.7982889428065745, 1.8253092088775376, -0.3669373274323129},
	{0.8552850037016371, 0.41888597546193007, -2.175796744794643, -0.760409975894666, 1.793853605457528, -0.2546917946478423},
	{0.8700655131944571, 0.451079826518962, -2.1642639955629646, -0.6843878570343563, 1.7463543710207352, -0.12902081975326413},
	{0.8848460226872772, 0.48327367757599393, -2.1527312463312867, -0.6083657381740466, 1.6988551365839422, -0.0033498448586859464},
	{0.8996265321800971, 0.5154675286330258, -2.1411984970996083, -0.532343619313737, 1.6513559021471493, 0.12232113003589218},
	{0.9144070416729172, 0.5476613796900578, -2.12966574786793, -0.45632150045342734, 1.6038566677103563, 0.24799210493047041},
	{0.9291875511657373, 0.5798552307470897, -2.118132998636252, -0.3802993815931177, 1.5563574332735635, 0.37366307982504854},
	{0.9439680606585573, 0.6120490818041215, -2.1066002494045737, -0.3042772627328081, 1.5088581988367706, 0.49933405471962666},
	{0.9587485701513774, 0.6442429328611535, -2.0950675001728953, -0.22825514387249846, 1.4613589643999776, 0.6250050296142048},
	{0.9735290796441973, 0.6764367839181855, -2.083534750941217, -0.15223302501218872, 1.4138597299631848, 0.7506760045087831},
	{0.9883095891370174, 0.7086306349752174, -2.072002001709539, -0.07621090615187909, 1.3663604955263917, 0.8763469794033613},
	{1.0030900986298374, 0.7408244860322493, -2.0604692524778607, -0.00018878729156947288, 1.318861261089599, 1.0020179542979393}
    };

    for (const auto& waypoint : waypoints) {
        trajectory_msgs::JointTrajectoryPoint point;
        point.positions = waypoint;
        trajectory.joint_trajectory.points.push_back(point);
    }

    // 目標関節角度の指定
    std::map<std::string, double> joint_values;
    joint_values["joint1"] = 1.0031064240644607;
    joint_values["joint2"] = 0.740823053049743;
    joint_values["joint3"] = -2.0603816587531423;
    joint_values["joint4"] = -0.0001051592687124625;
    joint_values["joint5"] = 1.3187745130631479;
    joint_values["joint6"] = 1.0020974406663496;

    moveit::planning_interface::MoveGroupInterface::Plan new_plan;
    new_plan.trajectory_ = trajectory;

    // ウェイポイントを通過するようにパス制約を設定
    moveit_msgs::Constraints path_constraints;
    for (int i = 0; i < trajectory.joint_trajectory.joint_names.size(); ++i) {
        moveit_msgs::JointConstraint joint_constraint;
        joint_constraint.joint_name = trajectory.joint_trajectory.joint_names[i];
        joint_constraint.position = waypoints[0][i];  // ウェイポイントの値
        joint_constraint.tolerance_above = 0.01;  // 適切な値に調整
        joint_constraint.tolerance_below = 0.01;  // 適切な値に調整
        joint_constraint.weight = 1.0;
        path_constraints.joint_constraints.push_back(joint_constraint);
    }

    // 1. MoveItのgetCurrentState関数を使用して、現在の start_state を取得する
    moveit::core::RobotStatePtr current_state = group.getCurrentState();

    // 2. 取得した start_state から、sensor_msgs/JointState メッセージを作成する
    sensor_msgs::JointState start_state_msg;
    start_state_msg.name = current_state->getJointModelGroup("xarm6")->getVariableNames();
    start_state_msg.position = current_state->getVariablePositions();

    // 3. 作成した sensor_msgs/JointState メッセージを、MotionPlanRequest の start_state フィールドに設定する
    trajectory.start_state.joint_state = start_state_msg;

    // パス制約を設定した状態でプランを生成
    group.setStartStateToCurrentState();
    group.setJointValueTarget(joint_values);
    group.setPathConstraints(path_constraints);
    bool success = (group.plan(new_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);

    if (success) {
        ROS_WARN("Success to make optimized path!");
        group.execute(new_plan);  // constraintsを使用する代わりに直接new_planを渡します
    } else {
        ROS_ERROR("Failed to plan a path!");
    }
}

